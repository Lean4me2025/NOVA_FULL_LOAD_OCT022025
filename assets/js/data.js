const FILES={categories:'categories.json',traits:'traits.json',jobs:'jobs.json'};async function j(n){const r=await fetch('data/'+n,{cache:'no-store'});if(!r.ok)throw 0;return r.json()}async function loadAllData(){const o={categories:[],traits:[],ooh:[]};try{o.categories=await j(FILES.categories)}catch(e){}try{o.traits=await j(FILES.traits)}catch(e){}try{o.ooh=await j(FILES.jobs)}catch(e){}return o}function computeMatches({ooh=[],selectedCategoryIds=[],selectedTraits=[]},max=30){const traitWords=new Set(selectedTraits.map(t=>(t.name||t).toLowerCase()));const catIds=new Set(selectedCategoryIds);const scored=[];for(const job of ooh){const title=(job.title||'').toLowerCase();const summary=(job.summary||'').toLowerCase();const jobCats=new Set(job.categoryIds||[]);let score=0;for(const id of catIds){if(jobCats.has(id))score+=5}for(const tw of traitWords){if(tw&&(title.includes(tw)||summary.includes(tw)))score+=1}if(score>0)scored.push({job,score})}scored.sort((a,b)=>b.score-a.score);return scored.slice(0,max).map(({job,score})=>({title:job.title,soc:job.soc_code||'',summary:job.summary||'',pay:job.median_pay||'',growth:job.growth||'',edu:job.education||'',score:Math.round(score*10)/10,categoryIds:job.categoryIds||[]}))}